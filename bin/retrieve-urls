#!/usr/bin/env php 
<?php
define("__ROOT__", dirname(__dir__));

require_once(__ROOT__ . "/src/requireHelper.php");
require_once(__ROOT__ . "/src/database.php");
require_once(__ROOT__ . "/src/state_machine.php");
require_once(__ROOT__ . "/src/retrieve_urls.php");


$database = Database::createAndConnect();

//Functions as a lock, no other instance of check or retrieve-urls can run on the same database while we're running.
$systemController = new StateMachine($database);
try {
    $systemController->changeStateTo("PREPARING");
} catch(Exception $e) {
    print("Unable to start retrieving links, received Exception: " . $e->getMessage() . "\n");
    exit( 1 );
}

print("Started retrieving links.\n");

//Reads in list of newline-seperated predicates and returns them as an array.
function parsePredicates($filePath) {
    $fileContents = file_get_contents($filePath);
    //Split into rows, filter any blank rows.
    return array_filter(explode("\n", $fileContents));
}

// Each line contains namesspace<whitespace>prefix
function parseNamespaces($filePath) {
    $fileContents = file($filePath);
    $namespaces = array();
    foreach( $fileContents as $line ) {
        list( $ns, $prefix ) = preg_split( "/\s+/", trim($line) );
        $namespaces[$ns]=$prefix;
    }
    return $namespaces;
}

// MAIN SCRIPT

chdir(__ROOT__); // means the config can be relative to the base of the app, or absolute
$predicates = parsePredicates(Config::PREDICATE_FILE_PATH);
$namespaces = parseNamespaces(Config::NAMESPACE_FILE_PATH);

foreach($predicates as $predicate) {
    print "PREDICATE: $predicate\n";
    $results = sparql_get_urls_for_predicate($predicate,$namespaces);
    if(!$results) {
        print("Error: Invalid SPARQL result, aborting.\n");
        exit( 1 );
    }

    //TODO Clear the existing database before repopulating, or delete old entries.

    $done = array();
    foreach($results as $urlInfo) {
        $code = $urlInfo["graph"]." ".$urlInfo["subject"]." $predicate ".$urlInfo["url"];
        if( array_key_exists( $code, $done ) ) { continue; }
        $done[$code] = true;
        $urlInfo["predicate"] = $predicate;
        if( isset($urlInfo["labelInSameGraph"]) ) { 
            $urlInfo["label"] = $urlInfo["labelInSameGraph"];
        } elseif( isset($urlInfo["anyOldLabel"]) ) { 
            $urlInfo["label"] = $urlInfo["anyOldLabel"];
        } else {
            $urlInfo["label"] = "NO LABEL";
        }

        print("Adding: " . $urlInfo["url"] . "\n");
        $database->addUrl($urlInfo);
    }
}

print("\n=========\nProcessing complete\n=========\n");

try {
    $systemController->changeStateTo("DONE");
    $lastRun = $database->getLastRun();
    $database->completeRun($lastRun["run_id"]);
} catch(Exception $e) {
    print("Unable to complete last run, received exception: " . $e->getMessage() . "\n");
    exit( 1 );
}

exit( 0 );
